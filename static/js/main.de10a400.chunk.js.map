{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","planets","setPlanets","loading","setLoading","useEffect","a","axios","result","parsedFields","data","results","p","length","keys","Object","i","isNaN","parseFloat","sort","b","name","fetchPlanets","sortPlanets","e","col","target","classList","contains","elems","document","querySelector","children","className","split","join","innerText","updatedPlanets","id","border","cellSpacing","cellPadding","onClick","map","planet","climate","diameter","gravity","orbital_period","population","rotation_period","surface_water","terrain","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.de10a400.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [planets, setPlanets] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPlanets = async () => {\n      const result = await axios(\"https://swapi.dev/api/planets/\");\n\n      let parsedFields = result.data.results;\n\n      for (let p = 0; p < parsedFields.length; p++) {\n        let keys = Object.keys(parsedFields[p]);\n        for (let i = 0; i < keys.length; i++) {\n          parsedFields[p][keys[i]] = !isNaN(\n            parseFloat(parsedFields[p][keys[i]])\n          )\n            ? parseFloat(parsedFields[p][keys[i]])\n            : parsedFields[p][keys[i]];\n        }\n      }\n\n      setPlanets(parsedFields.sort((a, b) => (a.name > b.name ? 1 : -1)));\n      setLoading(false);\n    };\n    fetchPlanets();\n  }, []);\n\n  const sortPlanets = (e, col) => {\n    const wasActive = e.target.classList.contains(\"active\");\n    let sort = \"asc\";\n    if (wasActive) {\n      if (e.target.classList.contains(\"asc\")) {\n        sort = \"desc\";\n      }\n    }\n    let elems = document.querySelector(\".table-head tr\").children;\n    for (let i = 0; i < elems.length; i++) {\n      elems[i].className = elems[i].className\n        .split(\"active\")\n        .join(\"\")\n        .split(\" asc\")\n        .join(\"\")\n        .split(\" desc\")\n        .join(\"\");\n      elems[i].innerText = elems[i].innerText\n        .split(\" ⬇️\")\n        .join(\"\")\n        .split(\" ⬆️\")\n        .join(\"\");\n    }\n\n    e.target.className = `active ${sort}`;\n    const updatedPlanets =\n      sort === \"asc\"\n        ? [...planets.sort((a, b) => (a[col] > b[col] ? 1 : -1))]\n        : [...planets.sort((a, b) => (a[col] > b[col] ? -1 : 1))];\n\n    e.target.innerText = e.target.innerText + (sort === \"asc\" ? \" ⬆️\" : \" ⬇️\");\n\n    setPlanets(updatedPlanets);\n  };\n\n  return (\n    <>\n      <h1>Star Wars Planets</h1>\n      {loading ? (\n        <h3>Fetching data...</h3>\n      ) : (\n        <table id=\"table\" border=\"0\" cellSpacing=\"0\" cellPadding=\"0\">\n          <thead className=\"table-head\">\n            <tr>\n              <th className=\"desktop\" onClick={(e) => sortPlanets(e, \"climate\")}>Climate</th>\n              <th onClick={(e) => sortPlanets(e, \"diameter\")}>Diameter</th>\n              <th className=\"desktop\" onClick={(e) => sortPlanets(e, \"gravity\")}>Gravity</th>\n              <th\n                className=\"active asc\"\n                onClick={(e) => sortPlanets(e, \"name\")}\n              >\n                Name ⬆️\n              </th>\n              <th className=\"desktop\" onClick={(e) => sortPlanets(e, \"orbital_period\")}>\n                Orbital Period\n              </th>\n              <th onClick={(e) => sortPlanets(e, \"population\")}>Population</th>\n              <th className=\"desktop\" onClick={(e) => sortPlanets(e, \"rotation_period\")}>\n                Rotation Period\n              </th>\n              <th className=\"desktop\" onClick={(e) => sortPlanets(e, \"surface_water\")}>\n                Surface Water\n              </th>\n              <th onClick={(e) => sortPlanets(e, \"terrain\")}>Terrain</th>\n            </tr>\n          </thead>\n          <tbody className=\"table-body\">\n            {planets.map((planet) => (\n              <tr key={planet.name}>\n                <td className=\"desktop\">{planet.climate}</td>\n                <td>{planet.diameter}</td>\n                <td className=\"desktop\" >{planet.gravity}</td>\n                <td>{planet.name}</td>\n                <td className=\"desktop\">{planet.orbital_period}</td>\n                <td>{planet.population}</td>\n                <td className=\"desktop\">{planet.rotation_period}</td>\n                <td className=\"desktop\">{planet.surface_water}</td>\n                <td>{planet.terrain}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}